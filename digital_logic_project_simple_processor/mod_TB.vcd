$date
	Tue May 23 22:07:20 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module mod_TB $end
$var wire 1 ! a_in $end
$var wire 16 " bus [15:0] $end
$var wire 16 # g [15:0] $end
$var wire 16 $ temp1 [15:0] $end
$var wire 16 % t7 [15:0] $end
$var wire 16 & t6 [15:0] $end
$var wire 16 ' t5 [15:0] $end
$var wire 16 ( t4 [15:0] $end
$var wire 16 ) t3 [15:0] $end
$var wire 16 * t2 [15:0] $end
$var wire 16 + t1 [15:0] $end
$var wire 16 , t0 [15:0] $end
$var wire 8 - reg_en [7:0] $end
$var wire 7 . math_enables [6:0] $end
$var wire 1 / g_out $end
$var wire 1 0 g_in $end
$var wire 1 1 data_out $end
$var wire 16 2 data [15:0] $end
$var wire 5 3 current_state [4:0] $end
$var wire 23 4 code [22:0] $end
$var wire 8 5 bus2_buf_en [7:0] $end
$var wire 8 6 bus1_buf_en [7:0] $end
$var wire 5 7 address [4:0] $end
$var wire 5 8 ad [4:0] $end
$var wire 16 9 a_out [15:0] $end
$var reg 1 : clk $end
$var reg 5 ; count [4:0] $end
$scope module A $end
$var wire 1 : clk $end
$var wire 1 ! enable $end
$var wire 16 < x [15:0] $end
$var reg 16 = y [15:0] $end
$upscope $end
$scope module D $end
$var wire 1 1 enable $end
$var wire 16 > a [15:0] $end
$var reg 16 ? b [15:0] $end
$upscope $end
$scope module G $end
$var wire 1 : clk $end
$var wire 16 @ x [15:0] $end
$var wire 1 0 enable $end
$var reg 16 A y [15:0] $end
$upscope $end
$scope module R0 $end
$var wire 1 : clk $end
$var wire 1 B enable $end
$var wire 16 C x [15:0] $end
$var reg 16 D y [15:0] $end
$upscope $end
$scope module R1 $end
$var wire 1 : clk $end
$var wire 1 E enable $end
$var wire 16 F x [15:0] $end
$var reg 16 G y [15:0] $end
$upscope $end
$scope module R2 $end
$var wire 1 : clk $end
$var wire 1 H enable $end
$var wire 16 I x [15:0] $end
$var reg 16 J y [15:0] $end
$upscope $end
$scope module R3 $end
$var wire 1 : clk $end
$var wire 1 K enable $end
$var wire 16 L x [15:0] $end
$var reg 16 M y [15:0] $end
$upscope $end
$scope module R4 $end
$var wire 1 : clk $end
$var wire 1 N enable $end
$var wire 16 O x [15:0] $end
$var reg 16 P y [15:0] $end
$upscope $end
$scope module R5 $end
$var wire 1 : clk $end
$var wire 1 Q enable $end
$var wire 16 R x [15:0] $end
$var reg 16 S y [15:0] $end
$upscope $end
$scope module R6 $end
$var wire 1 : clk $end
$var wire 1 T enable $end
$var wire 16 U x [15:0] $end
$var reg 16 V y [15:0] $end
$upscope $end
$scope module R7 $end
$var wire 1 : clk $end
$var wire 1 W enable $end
$var wire 16 X x [15:0] $end
$var reg 16 Y y [15:0] $end
$upscope $end
$scope module T0 $end
$var wire 16 Z a [15:0] $end
$var wire 1 [ enable $end
$var reg 16 \ b [15:0] $end
$upscope $end
$scope module T1 $end
$var wire 16 ] a [15:0] $end
$var wire 1 ^ enable $end
$var reg 16 _ b [15:0] $end
$upscope $end
$scope module T2 $end
$var wire 16 ` a [15:0] $end
$var wire 1 a enable $end
$var reg 16 b b [15:0] $end
$upscope $end
$scope module T3 $end
$var wire 16 c a [15:0] $end
$var wire 1 d enable $end
$var reg 16 e b [15:0] $end
$upscope $end
$scope module T4 $end
$var wire 16 f a [15:0] $end
$var wire 1 g enable $end
$var reg 16 h b [15:0] $end
$upscope $end
$scope module T5 $end
$var wire 16 i a [15:0] $end
$var wire 1 j enable $end
$var reg 16 k b [15:0] $end
$upscope $end
$scope module T6 $end
$var wire 16 l a [15:0] $end
$var wire 1 m enable $end
$var reg 16 n b [15:0] $end
$upscope $end
$scope module T7 $end
$var wire 16 o a [15:0] $end
$var wire 1 p enable $end
$var reg 16 q b [15:0] $end
$upscope $end
$scope module ads $end
$var wire 1 : clk $end
$var wire 5 r ad_in [4:0] $end
$var reg 5 s ad_out [4:0] $end
$upscope $end
$scope module alu $end
$var wire 1 t AddSub $end
$var wire 16 u g [15:0] $end
$var wire 16 v p [15:0] $end
$var wire 16 w q [15:0] $end
$var wire 16 x xor_out [15:0] $end
$var wire 16 y sub_out [15:0] $end
$var wire 16 z or_out [15:0] $end
$var wire 16 { mod_out [15:0] $end
$var wire 7 | math_out [6:0] $end
$var wire 16 } divide_out [15:0] $end
$var wire 16 ~ and_out [15:0] $end
$var wire 16 !" add_out [15:0] $end
$scope module addme $end
$var wire 16 "" a [15:0] $end
$var wire 1 t addsub $end
$var wire 16 #" b [15:0] $end
$var wire 1 $" t $end
$var wire 16 %" out [15:0] $end
$upscope $end
$scope module addtri $end
$var wire 16 &" a [15:0] $end
$var wire 1 '" enable $end
$var reg 16 (" b [15:0] $end
$upscope $end
$scope module andme $end
$var wire 16 )" a [15:0] $end
$var wire 16 *" b [15:0] $end
$var wire 16 +" g [15:0] $end
$upscope $end
$scope module andtri $end
$var wire 16 ," a [15:0] $end
$var wire 1 -" enable $end
$var reg 16 ." b [15:0] $end
$upscope $end
$scope module divme $end
$var wire 16 /" dividend [15:0] $end
$var wire 16 0" divisor [15:0] $end
$var wire 16 1" remainder [15:0] $end
$var wire 16 2" quotient [15:0] $end
$upscope $end
$scope module divtri $end
$var wire 16 3" a [15:0] $end
$var wire 1 4" enable $end
$var reg 16 5" b [15:0] $end
$upscope $end
$scope module modtri $end
$var wire 16 6" a [15:0] $end
$var wire 1 7" enable $end
$var reg 16 8" b [15:0] $end
$upscope $end
$scope module my_xor $end
$var wire 16 9" a [15:0] $end
$var wire 16 :" b [15:0] $end
$var wire 16 ;" g [15:0] $end
$upscope $end
$scope module orme $end
$var wire 16 <" a [15:0] $end
$var wire 16 =" b [15:0] $end
$var wire 16 >" g [15:0] $end
$upscope $end
$scope module ortri $end
$var wire 16 ?" a [15:0] $end
$var wire 1 @" enable $end
$var reg 16 A" b [15:0] $end
$upscope $end
$scope module subme $end
$var wire 16 B" a [15:0] $end
$var wire 16 C" b [15:0] $end
$var wire 16 D" out [15:0] $end
$upscope $end
$scope module subtri $end
$var wire 16 E" a [15:0] $end
$var wire 1 F" enable $end
$var reg 16 G" b [15:0] $end
$upscope $end
$scope module xortri $end
$var wire 16 H" a [15:0] $end
$var wire 1 I" enable $end
$var reg 16 J" b [15:0] $end
$upscope $end
$upscope $end
$scope module cc $end
$var wire 16 K" bus1 [15:0] $end
$var wire 16 L" bus2 [15:0] $end
$var wire 1 : clk $end
$var wire 8 M" reg_en [7:0] $end
$var wire 8 N" temp2 [7:0] $end
$var wire 8 O" temp1 [7:0] $end
$var wire 9 P" temp [8:0] $end
$var wire 3 Q" in2 [2:0] $end
$var wire 3 R" in1 [2:0] $end
$var wire 4 S" func [3:0] $end
$var wire 16 T" d [15:0] $end
$var wire 5 U" current_state [4:0] $end
$var wire 23 V" code [22:0] $end
$var reg 5 W" address [4:0] $end
$var reg 8 X" bus1_buf_en [7:0] $end
$var reg 8 Y" bus2_buf_en [7:0] $end
$var reg 1 1 data_out $end
$var reg 1 0 g_in $end
$var reg 1 / g_out $end
$var reg 7 Z" math_enables [6:0] $end
$var reg 5 [" next_state [4:0] $end
$scope module i1 $end
$var wire 1 : clk $end
$var wire 3 \" reg_num [2:0] $end
$var reg 8 ]" reg_enable [7:0] $end
$upscope $end
$scope module i2 $end
$var wire 1 : clk $end
$var wire 3 ^" reg_num [2:0] $end
$var reg 8 _" reg_enable [7:0] $end
$upscope $end
$upscope $end
$scope module g_buf $end
$var wire 16 `" a [15:0] $end
$var wire 1 / enable $end
$var reg 16 a" b [15:0] $end
$upscope $end
$scope module rom $end
$var wire 5 b" address [4:0] $end
$var reg 23 c" code [22:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10010000000000001001 c"
b1 b"
b0z a"
bx `"
b0 _"
b0 ^"
b0 ]"
b1 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b10010000000000001001 V"
b0 U"
b1001 T"
b1 S"
b1 R"
b0 Q"
b100000 P"
b0 O"
b0 N"
b0 M"
bz L"
bz K"
b0z J"
0I"
bx H"
b0z G"
0F"
bx E"
bx D"
b0z C"
bx B"
b0z A"
0@"
bx ?"
bx >"
b0z ="
bx <"
bx ;"
b0z :"
bx 9"
b0z 8"
07"
bx 6"
b0z 5"
04"
bx 3"
bx 2"
bx 1"
b0z 0"
bx /"
b0z ."
0-"
b0x ,"
b0x +"
b0z *"
bx )"
b0z ("
0'"
bx &"
bx %"
0$"
b0z #"
bx ""
bx !"
b0x ~
bx }
b0 |
bx {
bx z
bx y
bx x
b0z w
bx v
b0z u
zt
b1 s
b0 r
b0z q
0p
bx o
b0z n
0m
bx l
b0z k
0j
bx i
b0z h
0g
bx f
b0z e
0d
bx c
b0z b
0a
bx `
b0z _
0^
bx ]
b0z \
0[
bx Z
bx Y
b0z X
0W
bx V
b0z U
0T
bx S
b0z R
0Q
bx P
b0z O
0N
bx M
b0z L
0K
bx J
b0z I
0H
bx G
b0z F
0E
bx D
b0z C
0B
bx A
b0z @
b0z ?
b1001 >
bx =
b0z <
b0 ;
1:
bx 9
b1 8
b0 7
b0 6
b0 5
b10010000000000001001 4
b0 3
b1001 2
01
00
0/
b0 .
b0 -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
b0z #
b0z "
z!
$end
#50000
b0x001 +
b0x001 G
b0x001 ]
b0x00x ~
b0x00x +"
b0x00x ,"
bx1 z
bx1 >"
bx1 ?"
1E
b0x001 "
b0x001 <
b0x001 C
b0x001 F
b0x001 I
b0x001 L
b0x001 O
b0x001 R
b0x001 U
b0x001 X
b0x001 w
b0x001 #"
b0x001 *"
b0x001 0"
b0x001 :"
b0x001 ="
b0x001 C"
b1001 ?
b1000000 -
b1000000 M"
b1000000 O"
b1000000 ]"
b10000000 N"
b10000000 _"
11
b100001 P"
b1 3
b1 U"
b1 ["
0:
b1 ;
#100000
b0x ~
b0x +"
b0x ,"
bx z
bx >"
bx ?"
b0z "
b0z <
b0z C
b0z F
b0z I
b0z L
b0z O
b0z R
b0z U
b0z X
b0z w
b0z #"
b0z *"
b0z 0"
b0z :"
b0z ="
b0z C"
b0z ?
01
b100000 P"
b0 3
b0 U"
b0 ["
1:
b10 ;
#150000
b0z +
b0z G
b0z ]
b0x00x ~
b0x00x +"
b0x00x ,"
bx1 z
bx1 >"
bx1 ?"
b0x001 "
b0x001 <
b0x001 C
b0x001 F
b0x001 I
b0x001 L
b0x001 O
b0x001 R
b0x001 U
b0x001 X
b0x001 w
b0x001 #"
b0x001 *"
b0x001 0"
b0x001 :"
b0x001 ="
b0x001 C"
b1001 ?
b1000000 6
b1000000 X"
11
b100001 P"
b1 3
b1 U"
b1 ["
0:
b11 ;
#200000
b0x001 +
b0x001 G
b0x001 ]
b0 6
b0 X"
b0x ~
b0x +"
b0x ,"
bx z
bx >"
bx ?"
b0z "
b0z <
b0z C
b0z F
b0z I
b0z L
b0z O
b0z R
b0z U
b0z X
b0z w
b0z #"
b0z *"
b0z 0"
b0z :"
b0z ="
b0z C"
b0z ?
01
b100000 P"
b0 3
b0 U"
b0 ["
1:
b100 ;
#250000
b0z +
b0z G
b0z ]
b0x00x ~
b0x00x +"
b0x00x ,"
bx1 z
bx1 >"
bx1 ?"
b0x001 "
b0x001 <
b0x001 C
b0x001 F
b0x001 I
b0x001 L
b0x001 O
b0x001 R
b0x001 U
b0x001 X
b0x001 w
b0x001 #"
b0x001 *"
b0x001 0"
b0x001 :"
b0x001 ="
b0x001 C"
b1001 ?
b1000000 6
b1000000 X"
11
b100001 P"
b1 3
b1 U"
b1 ["
0:
b101 ;
#300000
b0x001 +
b0x001 G
b0x001 ]
b0 6
b0 X"
b0x ~
b0x +"
b0x ,"
bx z
bx >"
bx ?"
b0z "
b0z <
b0z C
b0z F
b0z I
b0z L
b0z O
b0z R
b0z U
b0z X
b0z w
b0z #"
b0z *"
b0z 0"
b0z :"
b0z ="
b0z C"
b0z ?
01
b100000 P"
b0 3
b0 U"
b0 ["
1:
b110 ;
#350000
b0z +
b0z G
b0z ]
b0x00x ~
b0x00x +"
b0x00x ,"
bx1 z
bx1 >"
bx1 ?"
b0x001 "
b0x001 <
b0x001 C
b0x001 F
b0x001 I
b0x001 L
b0x001 O
b0x001 R
b0x001 U
b0x001 X
b0x001 w
b0x001 #"
b0x001 *"
b0x001 0"
b0x001 :"
b0x001 ="
b0x001 C"
b1001 ?
b1000000 6
b1000000 X"
11
b100001 P"
b1 3
b1 U"
b1 ["
0:
b111 ;
#400000
b0x001 +
b0x001 G
b0x001 ]
b0 6
b0 X"
b0x ~
b0x +"
b0x ,"
bx z
bx >"
bx ?"
b0z "
b0z <
b0z C
b0z F
b0z I
b0z L
b0z O
b0z R
b0z U
b0z X
b0z w
b0z #"
b0z *"
b0z 0"
b0z :"
b0z ="
b0z C"
b0z ?
01
b100000 P"
b0 3
b0 U"
b0 ["
1:
b1000 ;
#450000
b0z +
b0z G
b0z ]
b0x00x ~
b0x00x +"
b0x00x ,"
bx1 z
bx1 >"
bx1 ?"
b0x001 "
b0x001 <
b0x001 C
b0x001 F
b0x001 I
b0x001 L
b0x001 O
b0x001 R
b0x001 U
b0x001 X
b0x001 w
b0x001 #"
b0x001 *"
b0x001 0"
b0x001 :"
b0x001 ="
b0x001 C"
b1001 ?
b1000000 6
b1000000 X"
11
b100001 P"
b1 3
b1 U"
b1 ["
0:
b1001 ;
#500000
b0x001 +
b0x001 G
b0x001 ]
b0 6
b0 X"
b0x ~
b0x +"
b0x ,"
bx z
bx >"
bx ?"
b0z "
b0z <
b0z C
b0z F
b0z I
b0z L
b0z O
b0z R
b0z U
b0z X
b0z w
b0z #"
b0z *"
b0z 0"
b0z :"
b0z ="
b0z C"
b0z ?
01
b100000 P"
b0 3
b0 U"
b0 ["
1:
b1010 ;
#550000
b0z +
b0z G
b0z ]
b0x00x ~
b0x00x +"
b0x00x ,"
bx1 z
bx1 >"
bx1 ?"
b0x001 "
b0x001 <
b0x001 C
b0x001 F
b0x001 I
b0x001 L
b0x001 O
b0x001 R
b0x001 U
b0x001 X
b0x001 w
b0x001 #"
b0x001 *"
b0x001 0"
b0x001 :"
b0x001 ="
b0x001 C"
b1001 ?
b1000000 6
b1000000 X"
11
b100001 P"
b1 3
b1 U"
b1 ["
0:
b1011 ;
#600000
b0x001 +
b0x001 G
b0x001 ]
b0 6
b0 X"
b0x ~
b0x +"
b0x ,"
bx z
bx >"
bx ?"
b0z "
b0z <
b0z C
b0z F
b0z I
b0z L
b0z O
b0z R
b0z U
b0z X
b0z w
b0z #"
b0z *"
b0z 0"
b0z :"
b0z ="
b0z C"
b0z ?
01
b100000 P"
b0 3
b0 U"
b0 ["
1:
b1100 ;
#650000
b0z +
b0z G
b0z ]
b0x00x ~
b0x00x +"
b0x00x ,"
bx1 z
bx1 >"
bx1 ?"
b0x001 "
b0x001 <
b0x001 C
b0x001 F
b0x001 I
b0x001 L
b0x001 O
b0x001 R
b0x001 U
b0x001 X
b0x001 w
b0x001 #"
b0x001 *"
b0x001 0"
b0x001 :"
b0x001 ="
b0x001 C"
b1001 ?
b1000000 6
b1000000 X"
11
b100001 P"
b1 3
b1 U"
b1 ["
0:
b1101 ;
#700000
b0x001 +
b0x001 G
b0x001 ]
b0 6
b0 X"
b0x ~
b0x +"
b0x ,"
bx z
bx >"
bx ?"
b0z "
b0z <
b0z C
b0z F
b0z I
b0z L
b0z O
b0z R
b0z U
b0z X
b0z w
b0z #"
b0z *"
b0z 0"
b0z :"
b0z ="
b0z C"
b0z ?
01
b100000 P"
b0 3
b0 U"
b0 ["
1:
b1110 ;
#750000
b0z +
b0z G
b0z ]
b0x00x ~
b0x00x +"
b0x00x ,"
bx1 z
bx1 >"
bx1 ?"
b0x001 "
b0x001 <
b0x001 C
b0x001 F
b0x001 I
b0x001 L
b0x001 O
b0x001 R
b0x001 U
b0x001 X
b0x001 w
b0x001 #"
b0x001 *"
b0x001 0"
b0x001 :"
b0x001 ="
b0x001 C"
b1001 ?
b1000000 6
b1000000 X"
11
b100001 P"
b1 3
b1 U"
b1 ["
0:
b1111 ;
#800000
b0x001 +
b0x001 G
b0x001 ]
b0 6
b0 X"
b0x ~
b0x +"
b0x ,"
bx z
bx >"
bx ?"
b0z "
b0z <
b0z C
b0z F
b0z I
b0z L
b0z O
b0z R
b0z U
b0z X
b0z w
b0z #"
b0z *"
b0z 0"
b0z :"
b0z ="
b0z C"
b0z ?
01
b100000 P"
b0 3
b0 U"
b0 ["
1:
b10000 ;
#850000
b0z +
b0z G
b0z ]
b0x00x ~
b0x00x +"
b0x00x ,"
bx1 z
bx1 >"
bx1 ?"
b0x001 "
b0x001 <
b0x001 C
b0x001 F
b0x001 I
b0x001 L
b0x001 O
b0x001 R
b0x001 U
b0x001 X
b0x001 w
b0x001 #"
b0x001 *"
b0x001 0"
b0x001 :"
b0x001 ="
b0x001 C"
b1001 ?
b1000000 6
b1000000 X"
11
b100001 P"
b1 3
b1 U"
b1 ["
0:
b10001 ;
#900000
b10010 ;
#950000
b10011 ;
#1000000
b10100 ;
